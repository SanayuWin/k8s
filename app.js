const express = require("express");

const app = express();

app.get("/", (req, res) => {
  res.send(`
    <img src="https://scontent.fbkk15-1.fna.fbcdn.net/v/t39.30808-6/385459084_6709083605818959_6500956239765374433_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=5f2048&_nc_eui2=AeF5I2bffSYUGM2KHvJc_PBXcq1OEPEL5S1yrU4Q8QvlLapNsDgJY52UpC46l5SMOVuaVNKiLFLVNVJeHDksBccu&_nc_ohc=3rwwTi5Oz7kAX_PgJUX&_nc_ht=scontent.fbkk15-1.fna&oh=00_AfAeUSuKAYBQq3dREJQWLSyU3NInahS4tzmy_0lCubRmLQ&oe=65FAF077" />
    <p>id: 65130406</p>
    <a href="/myresearch">MyResearch</a>
  `);
});

app.get("/myresearch", (req, res) => {
  res.send(`
  <p>name: Sanayu Jintanawannakun</p>
    <p>การพัฒนาแอปพลิเคชันเป็นกระบวนการที่เกี่ยวข้องกับการสร้างโปรแกรมหรือซอฟต์แวร์ที่ทำงานบนอุปกรณ์ต่างๆ เช่น สมาร์ทโฟน, แท็บเล็ต, คอมพิวเตอร์, และอุปกรณ์อื่นๆ กระบวนการนี้เริ่มต้นด้วยการวางแผนและออกแบบแอปพลิเคชัน, ตามด้วยการเขียนโค้ด, ทดสอบ, และนำไปใช้งานจริง การพัฒนาแอปพลิเคชันมีการเปลี่ยนแปลงไปตามเทคโนโลยีและความต้องการของผู้ใช้ ตั้งแต่เริ่มแรกที่มีเพียงแอปพลิเคชันง่ายๆ บนคอมพิวเตอร์ส่วนบุคคล ไปจนถึงแอปพลิเคชันสำหรับอุปกรณ์พกพาและแพลตฟอร์มต่างๆ ในปัจจุบัน นอกจากนี้ การพัฒนาแอปพลิเคชันยังรวมถึงการใช้เทคโนโลยีใหม่ๆ เช่น ปัญญาประดิษฐ์, การเรียนรู้ของเครื่อง, และบล็อกเชน, ทำให้แอปพลิเคชันมีความซับซ้อนและสามารถทำงานได้หลากหลายมากขึ้น การพัฒนาแอปพลิเคชันเป็นส่วนสำคัญของอุตสาหกรรมเทคโนโลยีสมัยใหม่และมีผลต่อวิถีชีวิตของผู้คนในทุกๆ ด้าน
    การเลือก Server-Side Runtime Environments เป็นส่วนสำคัญที่มีอิทธิพลต่อประสิทธิภาพ, ความปลอดภัย, ความสามารถในการขยายสเกล, และความสะดวกในการบำรุงรักษาของโครงการการพัฒนาแอปพลิเคชัน. ในยุคที่ตัวเลือกที่มีอยู่มีความหลากหลายและเต็มไปด้วยคุณลักษณะเฉพาะที่ตอบสนองความต้องการแตกต่างกันของแต่ละโครงการ, การศึกษาและการวิจัยเปรียบเทียบประสิทธิภาพของ Runtime Environments หลักๆ อย่าง Node.js, Deno.js, และ Bun.js จึงมีความสำคัญยิ่งในการให้ข้อมูลพื้นฐานที่ชัดเจนสำหรับการเลือกทางเลือกที่ดีที่สุดสำหรับการพัฒนาแอปพลิเคชัน.
    การศึกษานี้ไม่เพียงแต่มุ่งเน้นไปที่การเปรียบเทียบประสิทธิภาพของ Server Side Runtime Environments ในบริบทของการใช้ JavaScript ซึ่งเป็นภาษาที่ใช้กันอย่างแพร่หลายในการพัฒนาเว็บเท่านั้น แต่ยังรวมถึงการประเมินความสามารถในการขยายสเกล, และความสะดวกในการบำรุงรักษาเพื่อให้นักพัฒนาและองค์กรมีข้อมูลที่จำเป็นในการเลือกใช้ Runtime ที่เหมาะสมที่สุดตามความต้องการและเงื่อนไขของโครงการ. นอกจากนี้, การเข้าใจถึงข้อจำกัดและความยืดหยุ่นที่มาพร้อมกับการใช้ Runtime ต่างๆ ที่ Server-Side ช่วยให้นักพัฒนาสามารถเพิ่มประสิทธิภาพของโค้ด, ลด latency, และปรับปรุงประสิทธิภาพโดยรวมของแอปพลิเคชันได้อย่างมีประสิทธิผล.
    การวิจัยนี้ยังรวมถึงการเปรียบเทียบความเร็วและการจัดสรรหน่วยความจำของ JavaScript Runtime ใน Server-Side เพื่อให้ได้ข้อมูลเชิงลึกและความเข้าใจที่ดีขึ้นเกี่ยวกับแนวทางการพัฒนาที่สามารถนำไปสู่ประสิทธิภาพที่ดีขึ้น. นอกจากนี้, การเปรียบเทียบความเร็วใน Docker โดยใช้ Runtime Environments ต่างๆ ที่ Server-Side มีความสำคัญอย่างยิ่งในการช่วยให้นักพัฒนาและองค์กรเข้าใจว่า Runtime ใดที่มีประสิทธิภาพดีที่สุดสำหรับการใช้งานในบริบทของ JavaScript บน Server-Side. การศึกษาเหล่านี้ไม่เพียงแต่เป็นประโยชน์ในการตัดสินใจเลือกเทคโนโลยีและเทคนิคที่เหมาะสมเพื่อส่งมอบผลลัพธ์ที่ดีที่สุดให้กับผู้ใช้งานเท่านั้น แต่ยังช่วยให้ทีมทำงานเข้าใจถึงแนวทางในการปรับปรุงประสิทธิภาพของแอปพลิเคชันอย่างมีประสิทธิผลด้วย  
    </p>
  `)
})

app.get("/error", (req, res) => {
  process.exit(1);
});

app.listen(8080);
